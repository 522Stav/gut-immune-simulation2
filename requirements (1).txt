# streamlit_gut_sim_app.py
# Gut-Immune Simulation + ML Prediction + User Upload

import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.ensemble import GradientBoostingRegressor

# -----------------------------
# Simulation + ML Setup
# -----------------------------

np.random.seed(42)

bacteria_species = ["Bacteroides", "Firmicutes", "Actinobacteria", "Proteobacteria",
                    "Lactobacillus", "Clostridium", "Faecalibacterium"]
immune_cells = ["Treg", "Th17", "Macrophage", "Dendritic", "Cytokine_IL6", "Cytokine_TNF"]
time_steps = 100

def generate_initial_states():
    return (
        {sp: np.random.randint(50, 200) for sp in bacteria_species},
        {cell: np.random.randint(5, 30) for cell in immune_cells}
    )

def generate_synthetic_health_logs(n_samples=500):
    df = pd.DataFrame({
        sp: np.random.randint(50, 250, size=n_samples) for sp in bacteria_species
    })
    df["Treg"] = np.random.randint(10, 60, size=n_samples)
    df["IL6"] = np.random.randint(5, 50, size=n_samples)
    df["TNF"] = np.random.randint(5, 40, size=n_samples)
    df["flare_index"] = (df["IL6"] + df["TNF"]) / df["Treg"] + np.random.normal(0, 0.5, n_samples)
    return df

def train_ml_model():
    df = generate_synthetic_health_logs()
    features = df[bacteria_species + ["Treg", "IL6", "TNF"]]
    labels = df["flare_index"]
    model = GradientBoostingRegressor()
    model.fit(features, labels)
    return model

ml_model = train_ml_model()

# -----------------------------
# Simulation Engine
# -----------------------------

def run_simulation(apply_antibiotics, apply_probiotics, apply_diet):
    bacteria, immune = generate_initial_states()
    pop_history = {sp: [] for sp in bacteria_species}
    flare_index = []
    ml_flare_pred = []

    for t in range(time_steps):
        if apply_antibiotics and t == 20:
            for sp in bacteria:
                bacteria[sp] = int(bacteria[sp] * 0.5)
        if apply_probiotics and t == 50:
            bacteria["Lactobacillus"] += 50
            bacteria["Faecalibacterium"] += 30
        if apply_diet and t == 70:
            immune["Treg"] += 10
            immune["Cytokine_TNF"] = max(0, immune["Cytokine_TNF"] - 5)
            immune["Cytokine_IL6"] = max(0, immune["Cytokine_IL6"] - 5)

        for sp in bacteria:
            bacteria[sp] = max(0, bacteria[sp] + np.random.randint(-10, 10))
            pop_history[sp].append(bacteria[sp])

        dysbiosis_score = (
            bacteria["Proteobacteria"] * 0.01 -
            bacteria["Faecalibacterium"] * 0.005 +
            np.random.uniform(-0.5, 0.5)
        )

        for cell in immune:
            immune[cell] = max(0, immune[cell] + int(sum(bacteria.values()) / 1000 + np.random.randint(-2, 3) + dysbiosis_score))

        flare = (immune["Cytokine_IL6"] + immune["Cytokine_TNF"]) / max(1, immune["Treg"])
        flare_index.append(flare)

        ml_input = np.array([*[bacteria[sp] for sp in bacteria_species], immune["Treg"], immune["Cytokine_IL6"], immune["Cytokine_TNF"]]).reshape(1, -1)
        ml_flare_pred.append(ml_model.predict(ml_input)[0])

    return pop_history, flare_index, ml_flare_pred

# -----------------------------
# Plotting
# -----------------------------

def plot_results(pop_history, flare_index, ml_flare_pred):
    fig, axs = plt.subplots(3, 1, figsize=(12, 10))

    for sp in bacteria_species:
        axs[0].plot(pop_history[sp], label=sp)
    axs[0].set_title("Bacterial Populations Over Time")
    axs[0].legend()
    axs[0].grid(True)

    axs[1].plot(flare_index, color='red', label="Rule-Based Flare Index")
    axs[1].axhline(5, color='black', linestyle='--')
    axs[1].set_title("Autoimmune Flare Index (Rule-Based)")
    axs[1].legend()
    axs[1].grid(True)

    axs[2].plot(ml_flare_pred, color='blue', label="ML Predicted Flare Index")
    axs[2].axhline(5, color='black', linestyle='--')
    axs[2].set_title("Autoimmune Flare Index (ML Prediction)")
    axs[2].legend()
    axs[2].grid(True)

    st.pyplot(fig)

# -----------------------------
# Streamlit UI
# -----------------------------

st.title("ðŸ§  Gut-Immune Digital Twin Simulation + ML Prediction")
st.markdown("Simulate your gut-immune system or upload your health test data for ML-based flare predictions.")

st.sidebar.header("Simulation Controls")
apply_antibiotics = st.sidebar.checkbox("Apply Antibiotics", value=True)
apply_probiotics = st.sidebar.checkbox("Apply Probiotics", value=True)
apply_diet = st.sidebar.checkbox("Apply Anti-inflammatory Diet", value=True)

st.sidebar.markdown("---")
st.sidebar.header("Upload Your Own Health Data")
uploaded_file = st.sidebar.file_uploader("Upload CSV file", type=["csv"])

if uploaded_file:
    try:
        user_df = pd.read_csv(uploaded_file)
        required_cols = bacteria_species + ["Treg", "IL6", "TNF"]
        if set(required_cols).issubset(user_df.columns):
            st.subheader("ðŸ“ˆ Flare Prediction from Uploaded Data")
            preds = ml_model.predict(user_df[required_cols])
            user_df["Predicted_Flare_Index"] = preds
            st.dataframe(user_df)
        else:
            st.error("CSV must include: " + ", ".join(required_cols))
    except Exception as e:
        st.error(f"Failed to read file: {e}")
else:
    if st.button("Run Simulation"):
        pop_history, flare_index, ml_flare_pred = run_simulation(apply_antibiotics, apply_probiotics, apply_diet)
        plot_results(pop_history, flare_index, ml_flare_pred)
        st.success("Simulation Complete!")
